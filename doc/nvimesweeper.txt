*nvimesweeper.txt*	Play Minesweeper in your favourite text editor!

Author:  Sean Dewar <https://github.com/seandewar>
License: MIT

This plugin requires Neovim version 0.5 or newer.

==============================================================================
CONFIGURATION					*nvimesweeper-configure*

Nvimesweeper provides some ways for configuring defaults via the `setup()`
function. See |nvimesweeper.setup()| for details.

Additionally, the highlights used for colouring the board may be overridden,
see |nvimesweeper-highlight-groups|.

==============================================================================
COMMANDS					*nvimesweeper-commands*

						*:Nvimesweeper*
:Nvimesweeper [args]	Starts a new game of Nvimesweeper.

			The following optional arguments are supported:

			"width"		Width of the board in squares.
					Takes a positive integer.

			"height"	Height of the board in squares.
					Takes a positive integer.

			"mines"		Number of mines to place on the board.
					Takes a positive integer.

			"tab"		Display the game in a new tab page
					window, rather than a floating window.
					Takes a boolean. Defaults to false.

					Games that start in a tab page will
					not end if the window is closed. This
					allows you to return to your game by
					finding its buffer with |:b|, for
					example.

			Arguments are specified in the format `arg=value`.
			Boolean arguments, such as "tab", may simply be
			specified as `arg` to be set to true. Game presets may
			be specified as booleans.

			If any of the "width", "height" or "mines" arguments
			are omitted, you will be prompted for their values. If
			all are omitted, you will be prompted for a preset.
			Other arguments are set to their defaults.

			Examples:
>
			:Nvimesweeper tab width=100 height=20 mines=200
<
			Starts a game in a new tab page window with a 100x20
			board and 200 mines.
>
			:Nvimesweeper tab=false mines=100
<
			Starts a game in a new floating window with 200 mines,
			but you will be prompted for the width and height of
			the board.
>
			:Nvimesweeper hard mines=120
<
			Starts a game in a new floating window using the
			"hard" preset, but with 120 mines.

==============================================================================
MAPS						*nvimesweeper-maps*

In a game of Nvimesweeper, these buffer-local mappings are defined:

						*nvimesweeper_<F1>*
<F1>			Opens this help file.

					*nvimesweeper_<CR>* *nvimesweeper_x*
<CR> or x		Reveal the square under the cursor, unless it has been
			flagged. If the square contains a mine, you lose.

						*nvimesweeper_<LeftMouse>*
<LeftMouse>		Same as above. Requires mouse support to be enabled.
			See |'mouse'|.

						*nvimesweeper_<Space>*
<Space>			Cycle between flagging, marking and un-marking the
			unrevealed square under the cursor.

						*nvimesweeper_<RightMouse>*
<RightMouse>		Same as above. Requires mouse support to be enabled.
			See |'mouse'|.

						*nvimesweeper_!*
!			Flag the unrevealed square under the cursor as
			dangerous. If it is already flagged, the flag is
			removed.

			Useful if you suspect a mine is hiding underneath, as
			flagged squares cannot be revealed until the flag is
			removed.

						*nvimesweeper_?*
?			Mark the square under the cursor.

			Unlike flagged squares, marked squares can be
			revealed. Useful for marking a square to be revisited
			later if you are unsure.

==============================================================================
READING THE BOARD				*nvimesweeper-board*

Nvimesweeper represents the board state by displaying various symbols:

						*nvimesweeper-danger*
1 2 3 4 5 6 7 8 	These numbers represent the "danger level" of a
			revealed square. It corresponds to the number of mines
			directly adjacent to the square, in all 8 directions.

						*nvimesweeper-mine*
*			This is a mine. If you reveal this, you lose.
			All mines are revealed at the end of a game, except
			for correctly flagged mines.

						*nvimesweeper-flag*
!			This is an unrevealed square that you have flagged as
			dangerous.

						*nvimesweeper-mark*
?			This is an unrevealed square that has been marked.

						*nvimesweeper-wrong*
X			At the end of a game, all flagged squares that did not
			contain a mine are revealed with this symbol.

==============================================================================
SEEDING THE RANDOM NUMBER GENERATOR		*nvimesweeper-rng*

Nvimesweeper does not yet take responsibility for seeding the random number
generator used to place the mines, meaning you may see the same mine layout
after restarting Nvim.

To solve this, you may want to seed the RNG before running `:Nvimesweeper`.
For example, using the command: >
    :lua math.randomseed(os.time())
<
==============================================================================
LUA FUNCTIONS					*nvimesweeper-lua-functions*

Some Lua functions are available to be called from the `nvimesweeper` module.
They can be accessed like: >

	local nvimesweeper = require "nvimesweeper"
	nvimesweeper.play { medium = true }
<
						*nvimesweeper.setup()*
setup([{config}])	Provide the configuration to be used. Calling this is
			not required if you are happy with the defaults.

			{config} is an optional table with these keys:

			"opts":	    table of default values to use for
			arguments omitted from |:Nvimesweeper|. For example,
			to start games in a new tab page window by default: >

			    opts = { tab = true }
<
			"presets":  table of game presets. For example, to add
			a "very easy" preset using a 5x5 board with 5 mines: >

			    presets = {
				["very easy"] = {
				    width = 5,
				    height = 5,
				    mines = 5,
				},
			    }
<
			"prompt_presets":   table of preset names to display
			in the prompt if a preset was not specified when
			starting a game. For example, to only show the "hard",
			"insane" and "nightmare" presets: >

			    prompt_presets = { "hard", "insane", "nightmare" }
<
			Presets are shown in the prompt in the same order they
			are given. Any presets not specified can still be used
			if passed as an argument to |:Nvimesweeper|.

			"board_chars":	table of characters to use as board
			square symbols. Has the following keys:

			    "unrevealed": used for an unrevealed square.

			    "revealed": used for a revealed safe square with
			    no flags, markers or adjacent mines.

			    "mine": used for a revealed mine.

			    "flag": used for a flagged square.

			    "maybe": used for marked squares.

			    "flag_wrong": used for a flagged square that was
			    revealed to not have contained a mine at the end
			    of the game.

			Example: >

			    board_chars = { revealed = ".", mine = "@" }
<
			Note: omitted configuration values will use the
			defaults. To reset all values, omit or pass an empty
			table for {config}: >

			nvimesweeper.setup {}
<
						*nvimesweeper.play_cmd()*
play_cmd([{args}])	Works like |:Nvimesweeper|, where {args} are the
			optional command arguments as a string. Example: >

			nvimesweeper.play_cmd("hard mines=200 tab")
<
						*nvimesweeper.play()*
play([{opts}])		Like |nvimesweeper.play_cmd()|, but the optional
			arguments are passed as a table. Example: >

			nvimesweeper.play {
			    hard = true,
			    mines = 200,
			    tab = true,
			}
<
==============================================================================
HIGHLIGHT GROUPS			*nvimesweeper-highlight-groups*

Nvimesweeper defines default highlight groups (see |:hi-default|) when the
plugin is first loaded and on every |ColorScheme| event. They are:

						*hl-NvimesweeperWin*
NvimesweeperWin		Used in the status message to indicate a won game.

						*hl-NvimesweeperLose*
NvimesweeperLose	Used in the status message to indicate a lost game.

						*hl-NvimesweeperTooManyFlags*
NvimesweeperTooManyFlags	Used in the status message to indicate that
				the number of placed flags is equal to or
				greater than the number of mines. This means
				some flags must have been placed incorrectly.

						*hl-NvimesweeperUnrevealed*
NvimesweeperUnrevealed	Used for unrevealed squares without a flag or a mark.

						*hl-NvimesweeperFlag*
NvimesweeperFlag	Used for unrevealed squares with a flag.

						*hl-NvimesweeperMaybe*
NvimesweeperMaybe	Used for unrevealed squares with a mark.

						*hl-NvimesweeperTriggeredMine*
NvimesweeperTriggeredMine	Used for the mine that caused the game to end
				in a loss after it was revealed.

						*hl-NvimesweeperMine*
NvimesweeperMine	Used for automatically revealed mines at the end of a
			game.

						*hl-NvimesweeperFlagWrong*
NvimesweeperFlagWrong	Used for automatically revealed flagged squares that
			did not contain a mine at the end of a game.

						*hl-NvimesweeperRevealed*
NvimesweeperRevealed	Used for revealed safe squares with no flags, marks or
			adjacent mines.

			*hl-NvimesweeperDanger1* *hl-NvimesweeperDanger2*
			*hl-NvimesweeperDanger3* *hl-NvimesweeperDanger4*
			*hl-NvimesweeperDanger5* *hl-NvimesweeperDanger6*
			*hl-NvimesweeperDanger7* *hl-NvimesweeperDanger8*
NvimesweeperDanger1	Used for revealed safe squares with adjacent mines.
NvimesweeperDanger2
NvimesweeperDanger3	The number at the end of the name denotes how many
NvimesweeperDanger4	mines are adjacent.
NvimesweeperDanger5
NvimesweeperDanger6
NvimesweeperDanger7
NvimesweeperDanger8

==============================================================================
ABOUT						*nvimesweeper-about*

Grab the latest version or report a bug on GitHub:

https://github.com/seandewar/nvimesweeper

 vim:tw=78:ts=8:noet:ft=help:norl:
